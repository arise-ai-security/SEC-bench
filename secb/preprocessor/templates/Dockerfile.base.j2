FROM {{ base_image }}

# Install dependencies with SSL development libraries
RUN apt-get update && apt-get install -y vim bsdmainutils wget gdb software-properties-common \
    build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev autoconf automake cmake pkg-config \
    libssl-dev libsqlite3-dev libreadline-dev libffi-dev curl libbz2-dev checkinstall \
    openssl ltrace strace valgrind hexedit \
    bzip2 ca-certificates g++ gcc gfortran git gzip lsb-release patch tar unzip xz-utils zstd expect

# Add i386 architecture
RUN dpkg --add-architecture i386

# Configure CA certificates
RUN update-ca-certificates

# Install OpenSSL 1.1.1w from source
RUN cd /tmp && \
    wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz --no-check-certificate && \
    tar -xvzf openssl-1.1.1w.tar.gz && \
    cd openssl-1.1.1w && \
    ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib && \
    make -j$(nproc) && \
    make install && \
    echo "/usr/local/ssl/lib" > /etc/ld.so.conf.d/openssl-1.1.1.conf && \
    ldconfig -v && \
    cd .. && \
    rm -rf openssl-1.1.1w openssl-1.1.1w.tar.gz

# Set environment variables for OpenSSL
ENV PATH="/usr/local/ssl/bin:$PATH"
ENV LD_LIBRARY_PATH="/usr/local/ssl/lib"

# Verify OpenSSL installation
RUN /usr/local/ssl/bin/openssl version

# Download and install Python 3.11 with SSL support
RUN cd /tmp && \
    wget https://www.python.org/ftp/python/3.11.4/Python-3.11.4.tgz --no-check-certificate && \
    tar -xf Python-3.11.4.tgz && \
    cd Python-3.11.4 && \
    CPPFLAGS="-I/usr/local/ssl/include" \
    LDFLAGS="-L/usr/local/ssl/lib" \
    ./configure --enable-optimizations \
    --with-ensurepip=install \
    --with-openssl=/usr/local/ssl \
    --with-openssl-rpath=auto && \
    make -j$(nproc) && \
    make altinstall && \
    cd /tmp && \
    rm -rf Python-3.11.4 Python-3.11.4.tgz

# Set Python 3.11 as default using update-alternatives
RUN update-alternatives --install /usr/bin/python python /usr/local/bin/python3.11 1 && \
    update-alternatives --install /usr/local/bin/python3 python3 /usr/local/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip3.11 1 && \
    update-alternatives --install /usr/local/bin/pip3 pip3 /usr/local/bin/pip3.11 1

# Verify Python and SSL
RUN python --version && \
    pip --version && \
    python -c "import ssl; print(ssl.OPENSSL_VERSION)"

# Install pipx and swe-rex dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install pipx requests && \
    python -m pipx ensurepath 

# Shared environment variables
ENV POETRY_VIRTUALENVS_PATH=/openhands/poetry \
    MAMBA_ROOT_PREFIX=/openhands/micromamba \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    EDITOR=code \
    VISUAL=code \
    GIT_EDITOR="code --wait" \
    OPENVSCODE_SERVER_ROOT=/openhands/.openvscode-server


# Install base system dependencies
RUN apt-get install -y --no-install-recommends \
    wget curl sudo apt-utils git jq tmux \
    libgl1-mesa-glx \
    libasound2-plugins libatomic1 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Remove UID 1000 if it's called pn--this fixes the nikolaik image for ubuntu users
RUN if getent passwd 1000 | grep -q pn; then userdel pn; fi

# Create necessary directories
RUN mkdir -p /openhands && \
    mkdir -p /openhands/logs && \
    mkdir -p /openhands/poetry


# Install micromamba
RUN mkdir -p /openhands/micromamba/bin && \
    /bin/bash -c "PREFIX_LOCATION=/openhands/micromamba BIN_FOLDER=/openhands/micromamba/bin INIT_YES=no CONDA_FORGE_YES=yes $(curl -L https://micro.mamba.pm/install.sh)" && \
    /openhands/micromamba/bin/micromamba config remove channels defaults && \
    /openhands/micromamba/bin/micromamba config list

# Create the openhands virtual environment and install poetry and python
RUN /openhands/micromamba/bin/micromamba create -n openhands -y && \
    /openhands/micromamba/bin/micromamba install -n openhands -c conda-forge poetry python=3.12 -y

# Create a clean openhands directory including only the pyproject.toml, poetry.lock and openhands/__init__.py
RUN \
    if [ -d /openhands/code ]; then rm -rf /openhands/code; fi && \
    mkdir -p /openhands/code/openhands && \
    touch /openhands/code/openhands/__init__.py

COPY ./code/pyproject.toml ./code/poetry.lock /openhands/code/

COPY ./code/openhands/runtime/plugins/vscode/settings.json /workspace/.vscode/settings.json
RUN chmod -R a+rwx /workspace/.vscode/settings.json


# Install all dependencies
WORKDIR /openhands/code

# Configure micromamba and poetry
RUN /openhands/micromamba/bin/micromamba config set changeps1 False && \
    /openhands/micromamba/bin/micromamba run -n openhands poetry config virtualenvs.path /openhands/poetry && \
    /openhands/micromamba/bin/micromamba run -n openhands poetry env use python3.12

# Install project dependencies in smaller chunks
RUN /openhands/micromamba/bin/micromamba run -n openhands poetry install --only main --no-interaction --no-root

RUN /openhands/micromamba/bin/micromamba run -n openhands poetry install --only runtime --no-interaction --no-root

# Install playwright and its dependencies
RUN apt-get update && \
    /openhands/micromamba/bin/micromamba run -n openhands poetry run pip install playwright && \
    /openhands/micromamba/bin/micromamba run -n openhands poetry run playwright install --with-deps chromium

# Set environment variables and permissions
RUN /openhands/micromamba/bin/micromamba run -n openhands poetry run python -c "import sys; print('OH_INTERPRETER_PATH=' + sys.executable)" >> /etc/environment && \
    chmod -R g+rws /openhands/poetry && \
    mkdir -p /openhands/workspace && chmod -R g+rws,o+rw /openhands/workspace

# ================================================================
# Copy Project source files
# ================================================================
RUN if [ -d /openhands/code/openhands ]; then rm -rf /openhands/code/openhands; fi
COPY ./code/pyproject.toml ./code/poetry.lock /openhands/code/

COPY ./code/openhands/runtime/plugins/vscode/settings.json /workspace/.vscode/settings.json
RUN chmod -R a+rwx /workspace/.vscode/settings.json

COPY ./code/openhands /openhands/code/openhands
RUN chmod a+rwx /openhands/code/openhands/__init__.py

# Install spack
RUN git clone --depth=2 --branch=releases/v0.23 https://github.com/spack/spack.git /opt/spack
ENV PATH="/opt/spack/bin:$PATH"
RUN echo ". /opt/spack/share/spack/setup-env.sh" >> /etc/profile \
    && echo "source /opt/spack/share/spack/setup-env.sh" >> ~/.bashrc

# Setup compilers
RUN spack compiler find
# RUN spack --insecure install gcc@5.4.0

WORKDIR /src