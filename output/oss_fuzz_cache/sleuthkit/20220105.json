{
  "commit": "1c7d4ac393ac45e96713b645cf88d59343962152",
  "files": {
    "Dockerfile": "# Copyright 2020 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nFROM gcr.io/oss-fuzz-base/base-builder\nRUN apt-get update && apt-get install -y make autoconf automake libtool\nRUN git clone --depth 1 https://github.com/sleuthkit/sleuthkit sleuthkit\nWORKDIR sleuthkit\nCOPY build.sh buildcorpus.sh sleuthkit_mem_img.h *_fuzzer.cc $SRC/\n",
    "build.sh": "#!/bin/bash -eu\n# Copyright 2020 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\nexport CFLAGS=\"$CFLAGS -Wno-error=non-c-typedef-for-linkage\"\nexport CXXFLAGS=\"$CXXFLAGS -Wno-error=non-c-typedef-for-linkage\"\n\n# Dont fail if some of the seed downloads fail.\n${SRC}/buildcorpus.sh || true\n\n./bootstrap\n./configure --enable-static --disable-shared --disable-java --without-afflib --without-libewf --without-libvhdi --without-libvmdk\nmake -j$(nproc)\n\ndeclare -A TSK_FS_TYPES=(\n  [\"ext\"]=\"TSK_FS_TYPE_EXT_DETECT\"\n  [\"fat\"]=\"TSK_FS_TYPE_FAT_DETECT\"\n  [\"hfs\"]=\"TSK_FS_TYPE_HFS\"\n  [\"ntfs\"]=\"TSK_FS_TYPE_NTFS\"\n  [\"iso9660\"]=\"TSK_FS_TYPE_ISO9660\"\n)\n\ndeclare -A TSK_VS_TYPES=(\n  [\"dos\"]=\"TSK_VS_TYPE_DOS\"\n  [\"gpt\"]=\"TSK_VS_TYPE_GPT\"\n  [\"mac\"]=\"TSK_VS_TYPE_MAC\"\n  [\"sun\"]=\"TSK_VS_TYPE_SUN\"\n)\n\n# The fls APFS fuzz target has a seperate source file since it uses the libtsk\n# pool layer.\n$CXX $CXXFLAGS -std=c++14 -I.. -I. -Itsk \\\n    $SRC/sleuthkit_fls_apfs_fuzzer.cc -o $OUT/sleuthkit_fls_apfs_fuzzer \\\n    $LIB_FUZZING_ENGINE $SRC/sleuthkit/tsk/.libs/libtsk.a\n\nfor type in ${!TSK_FS_TYPES[@]}; do\n  $CXX $CXXFLAGS -std=c++14 -I.. -I. -Itsk -DFSTYPE=${TSK_FS_TYPES[$type]} \\\n      $SRC/sleuthkit_fls_fuzzer.cc -o $OUT/sleuthkit_fls_${type}_fuzzer \\\n      $LIB_FUZZING_ENGINE $SRC/sleuthkit/tsk/.libs/libtsk.a\ndone\n\nfor type in ${!TSK_VS_TYPES[@]}; do\n  $CXX $CXXFLAGS -std=c++14 -I.. -I. -Itsk -DVSTYPE=${TSK_VS_TYPES[$type]} \\\n      $SRC/sleuthkit_mmls_fuzzer.cc -o $OUT/sleuthkit_mmls_${type}_fuzzer \\\n      $LIB_FUZZING_ENGINE $SRC/sleuthkit/tsk/.libs/libtsk.a\ndone\n",
    "buildcorpus.sh": "#!/bin/bash -eu\n#\n# Script to downloads test data and build the corpus\n#\n# Copyright 2021 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n################################################################################\n\n# Test data provided by:\n#\n# The Fuzzing Project: https://fuzzing-project.org/resources.html\n#   As CC0 1.0 Universal (CC0 1.0) Public Domain Dedication\n#   https://creativecommons.org/publicdomain/zero/1.0/\n#\n# The dfVFS project: https://github.com/log2timeline/dfvfs\n#   As Apache 2 https://github.com/log2timeline/dfvfs/blob/main/LICENSE\n\n# Files to use for fls fuzz targets\ndeclare -A FLS_TEST_FILES=(\n  [\"apfs\"]=\"https://github.com/log2timeline/dfvfs/blob/main/test_data/apfs.raw?raw=true\"\n  [\"ext\"]=\"https://files.fuzzing-project.org/filesystems/ext2.img\"\n  [\"fat\"]=\"https://files.fuzzing-project.org/filesystems/exfat.img https://files.fuzzing-project.org/filesystems/fat12.img https://files.fuzzing-project.org/filesystems/fat16.img https://files.fuzzing-project.org/filesystems/fat32.img\"\n  [\"hfs\"]=\"https://files.fuzzing-project.org/filesystems/hfsplus.img\"\n  [\"iso9660\"]=\"https://files.fuzzing-project.org/discimages/iso9660.iso\"\n  [\"ntfs\"]=\"https://files.fuzzing-project.org/filesystems/ntfs.img\"\n)\n\n# Files to use for mmls fuzz targets\ndeclare -A MMLS_TEST_FILES=(\n  [\"dos\"]=\"https://files.fuzzing-project.org/discimages/partition-dos\"\n  [\"gpt\"]=\"https://files.fuzzing-project.org/discimages/partition-gpt\"\n  [\"mac\"]=\"https://files.fuzzing-project.org/discimages/partition-mac\"\n)\n\n\nfor type in ${!FLS_TEST_FILES[@]}; do\n  fuzz_target=\"sleuthkit_fls_${type}_fuzzer\"\n\n  mkdir -p \"test_data/${fuzz_target}\"\n\n  IFS=\" \"; for url in ${FLS_TEST_FILES[$type]}; do\n    filename=$( echo ${url} | sed 's/?[^?]*$//' )\n    filename=$( basename ${filename} )\n\n    curl -L -o \"test_data/${fuzz_target}/${filename}\" \"${url}\"\n  done\n\n  (cd \"test_data/${fuzz_target}\" && zip ${OUT}/${fuzz_target}_seed_corpus.zip *)\ndone\n\n\nfor type in ${!MMLS_TEST_FILES[@]}; do\n  fuzz_target=\"sleuthkit_mmls_${type}_fuzzer\"\n\n  mkdir -p \"test_data/${fuzz_target}\"\n\n  IFS=\" \"; for url in ${MMLS_TEST_FILES[$type]}; do\n    filename=$( echo ${url} | sed 's/?[^?]*$//' )\n    filename=$( basename ${filename} )\n\n    curl -L -o \"test_data/${fuzz_target}/${filename}\" \"${url}\"\n  done\n\n  (cd \"test_data/${fuzz_target}\" && zip ${OUT}/${fuzz_target}_seed_corpus.zip *)\ndone\n",
    "project.yaml": "homepage: \"https://sleuthkit.org\"\nlanguage: c++\nprimary_contact: \"carrier@sleuthkit.org\"\nmain_repo: 'https://github.com/sleuthkit/sleuthkit'\n",
    "sleuthkit_fls_apfs_fuzzer.cc": "// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"sleuthkit/tsk/tsk_tools_i.h\"\n#include \"sleuthkit/tsk/fs/tsk_fs.h\"\n#include \"sleuthkit/tsk/pool/tsk_pool.h\"\n#include \"sleuthkit_mem_img.h\"\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  TSK_IMG_INFO* img;\n  TSK_IMG_INFO* pool_img;\n  TSK_FS_INFO* fs;\n  const TSK_POOL_INFO* pool;\n\n  img = mem_open(data, size);\n  if (img == nullptr) {\n    return 0;\n  }\n  pool = tsk_pool_open_img_sing(img, 0, TSK_POOL_TYPE_APFS);\n\n  if (pool == nullptr) {\n    goto out_img;\n  }\n  // Pool start block is APFS container specific and is hard coded for now\n  pool_img = pool->get_img_info(pool, (TSK_DADDR_T) 106);\n\n  if (pool_img == nullptr) {\n    goto out_pool;\n  }\n  fs = tsk_fs_open_img_decrypt(pool_img, 0, TSK_FS_TYPE_APFS_DETECT, \"\");\n\n  if (fs != nullptr) {\n    tsk_fs_fls(fs, TSK_FS_FLS_FULL, fs->root_inum, TSK_FS_DIR_WALK_FLAG_RECURSE, nullptr, 0);\n\n    fs->close(fs);\n  }\n  tsk_img_close(pool_img);\n\nout_pool:\n  tsk_pool_close(pool);\n\nout_img:\n  tsk_img_close(img);\n\n  return 0;\n}\n",
    "sleuthkit_fls_fuzzer.cc": "// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"sleuthkit/tsk/tsk_tools_i.h\"\n#include \"sleuthkit_mem_img.h\"\n\n#ifndef FSTYPE\n#error Define FSTYPE as a valid value of TSK_FS_TYPE_ENUM.\n#endif\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  TSK_IMG_INFO *img;\n  TSK_FS_INFO *fs;\n\n  img = mem_open(data, size);\n  if (img == nullptr)\n    return 0;\n\n  fs = tsk_fs_open_img(img, 0, FSTYPE);\n  if (fs != nullptr) {\n    tsk_fs_fls(fs, TSK_FS_FLS_FULL, fs->root_inum, TSK_FS_DIR_WALK_FLAG_RECURSE,\n               nullptr, 0);\n\n    fs->close(fs);\n  }\n\n  img->close(img);\n  return 0;\n}\n",
    "sleuthkit_mem_img.h": "// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#ifndef MEM_IMG_H\n#define MEM_IMG_H\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"sleuthkit/tsk/tsk_tools_i.h\"\n\ntypedef struct {\n  TSK_IMG_INFO img_info;\n  const uint8_t *data;\n  size_t size;\n} IMG_MEM_INFO;\n\nstatic ssize_t mem_read(TSK_IMG_INFO *img_info, TSK_OFF_T offset, char *buf,\n                        size_t len) {\n  IMG_MEM_INFO *mem_info = reinterpret_cast<IMG_MEM_INFO *>(img_info);\n  // Bounds-checking exists in the real drivers.\n  if (offset > mem_info->size) {\n    return -1;\n  }\n  ssize_t read_len = len;\n  if (offset + len > mem_info->size) {\n    read_len = mem_info->size - offset;\n  }\n  if (memcpy(buf, mem_info->data + offset, read_len) == nullptr) {\n    return -1;\n  } else {\n    return read_len;\n  }\n}\n\nstatic void mem_close(TSK_IMG_INFO *img_info) {\n  IMG_MEM_INFO *mem_info = reinterpret_cast<IMG_MEM_INFO *>(img_info);\n  tsk_deinit_lock(&(img_info->cache_lock));\n  free(mem_info);\n}\n\nstatic void mem_imgstat(TSK_IMG_INFO *img_info, FILE *hFile) {}\n\nTSK_IMG_INFO *mem_open(const uint8_t *data, size_t size) {\n  IMG_MEM_INFO *inmemory_img =\n      reinterpret_cast<IMG_MEM_INFO *>(malloc(sizeof(IMG_MEM_INFO)));\n  TSK_IMG_INFO *img;\n  if (inmemory_img == nullptr) {\n    return nullptr;\n  }\n  img = reinterpret_cast<TSK_IMG_INFO *>(inmemory_img);\n  img->itype = TSK_IMG_TYPE_RAW;\n  img->read = mem_read;\n  img->close = mem_close;\n  img->imgstat = mem_imgstat;\n  img->size = size;\n  img->sector_size = 512;\n  tsk_init_lock(&(img->cache_lock));\n  inmemory_img->data = data;\n  inmemory_img->size = size;\n  return img;\n}\n\n#endif // # MEM_IMG_H\n",
    "sleuthkit_mmls_fuzzer.cc": "// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"sleuthkit/tsk/tsk_tools_i.h\"\n#include \"sleuthkit_mem_img.h\"\n\n#ifndef VSTYPE\n#error Define VSTYPE as a valid value of TSK_VS_TYPE_ENUM.\n#endif\n\nstatic TSK_WALK_RET_ENUM part_act(TSK_VS_INFO *vs, const TSK_VS_PART_INFO *part,\n                                  void *ptr) {\n  return TSK_WALK_CONT;\n}\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  TSK_IMG_INFO *img;\n  TSK_VS_INFO *vs;\n\n  img = mem_open(data, size);\n  if (img == nullptr)\n    return 0;\n\n  vs = tsk_vs_open(img, 0, VSTYPE);\n  if (vs != nullptr) {\n    tsk_vs_part_walk(vs, 0, vs->part_count - 1, TSK_VS_PART_FLAG_ALL, part_act,\n                     nullptr);\n\n    tsk_vs_close(vs);\n  }\n\n  img->close(img);\n  return 0;\n}\n"
  },
  "date": "2022-01-05T10:06:06",
  "cached_at": "2025-10-24T14:48:02.215902"
}